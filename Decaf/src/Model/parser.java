package Model;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import Model.AST.expression.*;
import Model.AST.TypeChecker;
import Model.scope.*;
import Model.cg.*;
import Model.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\025\003\000\002\002\004\000\002\025" +
    "\004\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\004\000\002\030\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\035\005\000\002\035" +
    "\002\000\002\051\002\000\002\052\002\000\002\032\012" +
    "\000\002\053\002\000\002\054\002\000\002\032\012\000" +
    "\002\036\004\000\002\036\002\000\002\037\005\000\002" +
    "\037\002\000\002\031\004\000\002\055\002\000\002\033" +
    "\012\000\002\002\004\000\002\002\002\000\002\003\004" +
    "\000\002\003\002\000\002\004\003\000\002\004\005\000" +
    "\002\056\002\000\002\005\005\000\002\005\002\000\002" +
    "\006\004\000\002\006\004\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\002\000\002\034\007" +
    "\000\002\007\004\000\002\007\002\000\002\010\010\000" +
    "\002\010\010\000\002\011\006\000\002\012\004\000\002" +
    "\012\002\000\002\013\004\000\002\013\002\000\002\014" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\047\003\000\002" +
    "\047\002\000\002\057\002\000\002\060\002\000\002\015" +
    "\012\000\002\061\002\000\002\016\005\000\002\016\002" +
    "\000\002\062\002\000\002\063\002\000\002\017\011\000" +
    "\002\064\002\000\002\065\002\000\002\066\002\000\002" +
    "\020\016\000\002\021\005\000\002\022\004\000\002\023" +
    "\004\000\002\040\007\000\002\046\003\000\002\067\002" +
    "\000\002\046\006\000\002\044\005\000\002\044\006\000" +
    "\002\044\010\000\002\044\003\000\002\044\003\000\002" +
    "\044\005\000\002\044\007\000\002\044\003\000\002\044" +
    "\003\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\004\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\004" +
    "\000\002\070\002\000\002\044\006\000\002\071\002\000" +
    "\002\044\006\000\002\072\002\000\002\044\006\000\002" +
    "\044\004\000\002\044\010\000\002\044\006\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\073\002" +
    "\000\002\050\007\000\002\050\010\000\002\024\003\000" +
    "\002\024\002\000\002\045\003\000\002\074\002\000\002" +
    "\045\006\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\022\034\015\035\007\036\020\037\014\040" +
    "\016\041\023\042\021\073\012\001\002\000\004\073\377" +
    "\001\002\000\004\025\376\001\002\000\024\002\001\034" +
    "\015\035\007\036\020\037\014\040\016\041\023\042\021" +
    "\073\012\001\002\000\010\027\ufff2\030\105\073\ufff2\001" +
    "\002\000\024\002\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\073\ufffb\001\002\000\024\002" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\073\ufffe\001\002\000\010\027\ufff2\030\105\073" +
    "\ufff2\001\002\000\004\002\373\001\002\000\010\027\ufff2" +
    "\030\105\073\ufff2\001\002\000\004\073\111\001\002\000" +
    "\010\027\ufff2\030\105\073\ufff2\001\002\000\024\002\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\073\ufffc\001\002\000\010\027\ufff2\030\105\073\ufff2" +
    "\001\002\000\004\073\053\001\002\000\024\002\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\073\ufffd\001\002\000\004\073\024\001\002\000\010\032" +
    "\uffe6\045\uffe6\046\uffe6\001\002\000\010\032\uffe3\045\026" +
    "\046\uffe3\001\002\000\004\073\052\001\002\000\006\032" +
    "\uffe1\046\031\001\002\000\004\032\036\001\002\000\004" +
    "\073\033\001\002\000\004\032\uffe2\001\002\000\006\023" +
    "\034\032\uffe0\001\002\000\004\073\033\001\002\000\004" +
    "\032\uffdf\001\002\000\026\033\uffdc\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\070\044\071\040\072\043\073\uffd6" +
    "\001\002\000\004\033\051\001\002\000\016\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\073\uffd8\001\002\000\026" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\070" +
    "\uffde\071\uffde\072\uffde\073\uffde\001\002\000\016\034\015" +
    "\035\007\036\020\037\014\040\016\073\012\001\002\000" +
    "\016\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\073\uffd7" +
    "\001\002\000\016\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\073\uffd9\001\002\000\026\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\070\uffdb\071\uffdb\072\uffdb\073" +
    "\uffdb\001\002\000\026\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\070\uffda\071\uffda\072\uffda\073\uffda\001" +
    "\002\000\026\033\uffdc\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\070\044\071\040\072\043\073\uffd6\001\002\000" +
    "\004\033\uffdd\001\002\000\024\002\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\073\uffe5\001" +
    "\002\000\006\032\uffe4\046\uffe4\001\002\000\004\032\054" +
    "\001\002\000\020\033\uffd3\034\056\035\007\036\020\037" +
    "\014\040\016\073\012\001\002\000\004\073\077\001\002" +
    "\000\004\073\063\001\002\000\004\033\062\001\002\000" +
    "\020\033\uffd3\034\056\035\007\036\020\037\014\040\016" +
    "\073\012\001\002\000\004\033\uffd4\001\002\000\024\002" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\073\uffd5\001\002\000\004\026\064\001\002\000" +
    "\016\027\uffea\035\007\036\020\037\014\040\016\073\012" +
    "\001\002\000\006\023\073\027\uffe8\001\002\000\004\073" +
    "\072\001\002\000\004\027\070\001\002\000\004\025\071" +
    "\001\002\000\020\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\073\uffd1\001\002\000\006\023\uffe7\027\uffe7" +
    "\001\002\000\014\035\007\036\020\037\014\040\016\073" +
    "\012\001\002\000\004\027\uffeb\001\002\000\006\023\073" +
    "\027\uffe8\001\002\000\004\027\uffe9\001\002\000\004\026" +
    "\100\001\002\000\016\027\uffea\035\007\036\020\037\014" +
    "\040\016\073\012\001\002\000\004\027\102\001\002\000" +
    "\004\025\103\001\002\000\020\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\073\uffd2\001\002\000\006\027" +
    "\ufff7\073\ufff7\001\002\000\004\031\106\001\002\000\010" +
    "\027\ufff2\030\105\073\ufff2\001\002\000\006\027\ufff3\073" +
    "\ufff3\001\002\000\006\027\ufff5\073\ufff5\001\002\000\004" +
    "\026\uffee\001\002\000\004\026\113\001\002\000\016\027" +
    "\uffea\035\007\036\020\037\014\040\016\073\012\001\002" +
    "\000\004\027\uffed\001\002\000\004\027\116\001\002\000" +
    "\004\032\117\001\002\000\106\015\uffce\024\uffce\025\uffce" +
    "\026\uffce\032\uffce\033\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\043\uffce\044\uffce\047\uffce\050\uffce\051\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\001\002\000" +
    "\034\002\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\070\uffec\071\uffec\072\uffec\073" +
    "\uffec\001\002\000\106\015\132\024\133\025\uffc1\026\127" +
    "\032\117\033\uffcc\035\007\036\020\037\014\040\016\043" +
    "\147\044\141\047\131\050\160\051\140\053\142\054\150" +
    "\055\130\056\145\057\136\060\174\061\134\062\166\063" +
    "\123\064\153\065\156\066\162\067\157\073\151\074\154" +
    "\075\143\076\165\077\144\100\171\001\002\000\100\015" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\032\uffc5\033\uffc5\043\uffc5" +
    "\044\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\001\002\000\004" +
    "\026\uff91\001\002\000\050\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\001\002\000\100\015\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\032\uffc8\033\uffc8\043\uffc8\044\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\001\002\000\100\015\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\032\uffc4\033\uffc4\043\uffc4\044\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\077\uffc4\100\uffc4\001\002\000\052\015\132" +
    "\024\133\026\127\043\147\044\141\056\145\057\136\061" +
    "\134\062\166\063\123\064\153\065\156\066\162\067\157" +
    "\073\176\074\154\075\143\076\165\077\144\100\171\001" +
    "\002\000\004\025\364\001\002\000\004\026\351\001\002" +
    "\000\052\015\132\024\133\026\127\043\147\044\141\056" +
    "\145\057\136\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\052\015\132\024\133\026\127" +
    "\043\147\044\141\056\145\057\136\061\134\062\166\063" +
    "\123\064\153\065\156\066\162\067\157\073\176\074\154" +
    "\075\143\076\165\077\144\100\171\001\002\000\004\026" +
    "\uff93\001\002\000\004\025\343\001\002\000\004\026\336" +
    "\001\002\000\100\015\uffc9\024\uffc9\025\uffc9\026\uffc9\032" +
    "\uffc9\033\uffc9\043\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\001\002\000\004\026\324\001\002\000\050\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\001\002\000" +
    "\054\015\132\024\133\025\uffc1\026\127\043\147\044\141" +
    "\056\145\057\136\061\134\062\166\063\123\064\153\065" +
    "\156\066\162\067\157\073\176\074\154\075\143\076\165" +
    "\077\144\100\171\001\002\000\050\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e\014\uff7e\015\uff7e" +
    "\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\025" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\001\002\000\050\004\uff7d" +
    "\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\013\uff7d\014" +
    "\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d" +
    "\023\uff7d\025\uff7d\027\uff7d\030\uff7d\031\uff7d\001\002\000" +
    "\004\073\321\001\002\000\100\015\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\032\uffc3\033\uffc3\043\uffc3\044\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\001\002\000\050\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\025" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\001\002\000\004\025\320" +
    "\001\002\000\050\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\262\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\025\uffa8\026\uff87\030" +
    "\105\073\ufff2\001\002\000\100\015\uffca\024\uffca\025\uffca" +
    "\026\uffca\032\uffca\033\uffca\043\uffca\044\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\073\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\001\002\000\004\026\314\001\002\000" +
    "\050\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\023\uff7f\025\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\001\002\000\044\004\210\005\220\006\212\007\221\010" +
    "\213\011\206\013\204\014\222\015\203\016\214\017\205" +
    "\020\207\021\211\022\215\025\uffc2\027\uffc2\030\217\001" +
    "\002\000\004\026\311\001\002\000\004\026\306\001\002" +
    "\000\004\026\uffba\001\002\000\106\015\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\043\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\001\002" +
    "\000\004\026\275\001\002\000\076\015\132\024\133\025" +
    "\uffc1\026\127\032\117\033\uffcc\043\147\044\141\047\131" +
    "\050\160\051\140\053\142\054\150\055\130\056\145\057" +
    "\136\060\174\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\004\073\273\001\002\000\050" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\013" +
    "\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\025\uff7b\027\uff7b\030\uff7b\031\uff7b\001" +
    "\002\000\004\026\uff8f\001\002\000\050\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\025\uffa4\027\uffa4\030\uffa4\031\uffa4\001\002\000\100\015" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\032\uffc6\033\uffc6\043\uffc6" +
    "\044\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\001\002\000\050" +
    "\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\013" +
    "\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\022\uff7c\023\uff7c\025\uff7c\027\uff7c\030\uff7c\031\uff7c\001" +
    "\002\000\004\033\267\001\002\000\100\015\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\032\uffc7\033\uffc7\043\uffc7\044\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\077\uffc7\100\uffc7\001\002\000\004\026\175\001" +
    "\002\000\052\015\132\024\133\026\127\043\147\044\141" +
    "\056\145\057\136\061\134\062\166\063\123\064\153\065" +
    "\156\066\162\067\157\073\176\074\154\075\143\076\165" +
    "\077\144\100\171\001\002\000\054\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\262\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\025\uffa8\026\uff87\027\uffa8\030\uffa8\031\uffa8\001\002" +
    "\000\044\004\210\005\220\006\212\007\221\010\213\011" +
    "\206\013\204\014\222\015\203\016\214\017\205\020\207" +
    "\021\211\022\215\023\uffae\027\uffaf\030\217\001\002\000" +
    "\004\027\201\001\002\000\004\025\202\001\002\000\100" +
    "\015\uffb0\024\uffb0\025\uffb0\026\uffb0\032\uffb0\033\uffb0\043" +
    "\uffb0\044\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\001\002\000" +
    "\052\015\132\024\133\026\127\043\147\044\141\056\145" +
    "\057\136\061\134\062\166\063\123\064\153\065\156\066" +
    "\162\067\157\073\176\074\154\075\143\076\165\077\144" +
    "\100\171\001\002\000\052\015\132\024\133\026\127\043" +
    "\147\044\141\056\145\057\136\061\134\062\166\063\123" +
    "\064\153\065\156\066\162\067\157\073\176\074\154\075" +
    "\143\076\165\077\144\100\171\001\002\000\052\015\132" +
    "\024\133\026\127\043\147\044\141\056\145\057\136\061" +
    "\134\062\166\063\123\064\153\065\156\066\162\067\157" +
    "\073\176\074\154\075\143\076\165\077\144\100\171\001" +
    "\002\000\052\015\132\024\133\026\127\043\147\044\141" +
    "\056\145\057\136\061\134\062\166\063\123\064\153\065" +
    "\156\066\162\067\157\073\176\074\154\075\143\076\165" +
    "\077\144\100\171\001\002\000\052\015\132\024\133\026" +
    "\127\043\147\044\141\056\145\057\136\061\134\062\166" +
    "\063\123\064\153\065\156\066\162\067\157\073\176\074" +
    "\154\075\143\076\165\077\144\100\171\001\002\000\052" +
    "\015\132\024\133\026\127\043\147\044\141\056\145\057" +
    "\136\061\134\062\166\063\123\064\153\065\156\066\162" +
    "\067\157\073\176\074\154\075\143\076\165\077\144\100" +
    "\171\001\002\000\052\015\132\024\133\026\127\043\147" +
    "\044\141\056\145\057\136\061\134\062\166\063\123\064" +
    "\153\065\156\066\162\067\157\073\176\074\154\075\143" +
    "\076\165\077\144\100\171\001\002\000\052\015\132\024" +
    "\133\026\127\043\147\044\141\056\145\057\136\061\134" +
    "\062\166\063\123\064\153\065\156\066\162\067\157\073" +
    "\176\074\154\075\143\076\165\077\144\100\171\001\002" +
    "\000\052\015\132\024\133\026\127\043\147\044\141\056" +
    "\145\057\136\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\052\015\132\024\133\026\127" +
    "\043\147\044\141\056\145\057\136\061\134\062\166\063" +
    "\123\064\153\065\156\066\162\067\157\073\176\074\154" +
    "\075\143\076\165\077\144\100\171\001\002\000\004\073" +
    "\234\001\002\000\004\023\232\001\002\000\052\015\132" +
    "\024\133\026\127\043\147\044\141\056\145\057\136\061" +
    "\134\062\166\063\123\064\153\065\156\066\162\067\157" +
    "\073\176\074\154\075\143\076\165\077\144\100\171\001" +
    "\002\000\052\015\132\024\133\026\127\043\147\044\141" +
    "\056\145\057\136\061\134\062\166\063\123\064\153\065" +
    "\156\066\162\067\157\073\176\074\154\075\143\076\165" +
    "\077\144\100\171\001\002\000\052\015\132\024\133\026" +
    "\127\043\147\044\141\056\145\057\136\061\134\062\166" +
    "\063\123\064\153\065\156\066\162\067\157\073\176\074" +
    "\154\075\143\076\165\077\144\100\171\001\002\000\052" +
    "\015\132\024\133\026\127\043\147\044\141\056\145\057" +
    "\136\061\134\062\166\063\123\064\153\065\156\066\162" +
    "\067\157\073\176\074\154\075\143\076\165\077\144\100" +
    "\171\001\002\000\050\004\210\005\220\006\212\007\221" +
    "\010\213\011\206\013\204\014\uff95\015\203\016\214\017" +
    "\205\020\207\021\211\022\215\023\uff95\025\uff95\027\uff95" +
    "\030\uff95\031\uff95\001\002\000\050\004\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\011\uff9c\013\uff9c\014\uff9c\015\203" +
    "\016\214\017\205\020\207\021\211\022\215\023\uff9c\025" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\001\002\000\050\004\uff97" +
    "\005\uff97\006\212\007\221\010\213\011\206\013\uff97\014" +
    "\uff97\015\203\016\214\017\205\020\207\021\211\022\215" +
    "\023\uff97\025\uff97\027\uff97\030\uff97\031\uff97\001\002\000" +
    "\042\004\210\005\220\006\212\007\221\010\213\011\206" +
    "\013\204\014\222\015\203\016\214\017\205\020\207\021" +
    "\211\022\215\030\217\031\227\001\002\000\052\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\230\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\025\uffab\027\uffab\030\uffab\031\uffab\001" +
    "\002\000\052\015\132\024\133\026\127\043\147\044\141" +
    "\056\145\057\136\061\134\062\166\063\123\064\153\065" +
    "\156\066\162\067\157\073\176\074\154\075\143\076\165" +
    "\077\144\100\171\001\002\000\050\004\210\005\220\006" +
    "\212\007\221\010\213\011\206\013\204\014\222\015\203" +
    "\016\214\017\205\020\207\021\211\022\215\023\uffaa\025" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\001\002\000\052\015\132" +
    "\024\133\026\127\043\147\044\141\056\145\057\136\061" +
    "\134\062\166\063\123\064\153\065\156\066\162\067\157" +
    "\073\176\074\154\075\143\076\165\077\144\100\171\001" +
    "\002\000\004\027\uffad\001\002\000\054\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\236\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\026\235\027\uffa7\030\uffa7\031\uffa7\001" +
    "\002\000\054\015\132\024\133\026\127\027\uff83\043\147" +
    "\044\141\056\145\057\136\061\134\062\166\063\123\064" +
    "\153\065\156\066\162\067\157\073\176\074\154\075\143" +
    "\076\165\077\144\100\171\001\002\000\052\015\132\024" +
    "\133\026\127\043\147\044\141\056\145\057\136\061\134" +
    "\062\166\063\123\064\153\065\156\066\162\067\157\073" +
    "\176\074\154\075\143\076\165\077\144\100\171\001\002" +
    "\000\050\004\210\005\220\006\212\007\221\010\213\011" +
    "\206\013\204\014\222\015\203\016\214\017\205\020\207" +
    "\021\211\022\215\023\uffa6\025\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\001\002\000\004\027\246\001\002\000\044\004\210" +
    "\005\220\006\212\007\221\010\213\011\206\013\204\014" +
    "\222\015\203\016\214\017\205\020\207\021\211\022\215" +
    "\023\uff81\027\uff82\030\217\001\002\000\004\027\uff84\001" +
    "\002\000\004\023\244\001\002\000\052\015\132\024\133" +
    "\026\127\043\147\044\141\056\145\057\136\061\134\062" +
    "\166\063\123\064\153\065\156\066\162\067\157\073\176" +
    "\074\154\075\143\076\165\077\144\100\171\001\002\000" +
    "\004\027\uff80\001\002\000\050\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\013\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\025\uff85" +
    "\027\uff85\030\uff85\031\uff85\001\002\000\050\004\uff9f\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\215\023" +
    "\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\001\002\000\050" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\013" +
    "\uff9a\014\uff9a\015\203\016\214\017\205\020\207\021\211" +
    "\022\215\023\uff9a\025\uff9a\027\uff9a\030\uff9a\031\uff9a\001" +
    "\002\000\050\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\013\uff9b\014\uff9b\015\203\016\214\017\205\020" +
    "\207\021\211\022\215\023\uff9b\025\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\001\002\000\050\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\215\023\uffa0\025\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\001\002\000\050\004\uff98\005\uff98" +
    "\006\212\007\221\010\213\011\206\013\uff98\014\uff98\015" +
    "\203\016\214\017\205\020\207\021\211\022\215\023\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\001\002\000\050\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\214\017\205\020\uffa2\021\211\022" +
    "\215\023\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\001\002" +
    "\000\050\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011" +
    "\uff99\013\uff99\014\uff99\015\203\016\214\017\205\020\207" +
    "\021\211\022\215\023\uff99\025\uff99\027\uff99\030\uff99\031" +
    "\uff99\001\002\000\050\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\215\023\uff9e\025\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\001\002\000\050\004\210\005\220\006" +
    "\212\007\221\010\213\011\206\013\uff96\014\uff96\015\203" +
    "\016\214\017\205\020\207\021\211\022\215\023\uff96\025" +
    "\uff96\027\uff96\030\uff96\031\uff96\001\002\000\050\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\016\214\017\205\020\uffa1\021\211\022\215" +
    "\023\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1\001\002\000" +
    "\004\026\264\001\002\000\052\015\132\024\133\026\127" +
    "\043\147\044\141\056\145\057\136\061\134\062\166\063" +
    "\123\064\153\065\156\066\162\067\157\073\176\074\154" +
    "\075\143\076\165\077\144\100\171\001\002\000\050\004" +
    "\210\005\220\006\212\007\221\010\213\011\206\013\204" +
    "\014\222\015\203\016\214\017\205\020\207\021\211\022" +
    "\215\023\uffac\025\uffac\027\uffac\030\uffac\031\uffac\001\002" +
    "\000\054\015\132\024\133\026\127\027\uff83\043\147\044" +
    "\141\056\145\057\136\061\134\062\166\063\123\064\153" +
    "\065\156\066\162\067\157\073\176\074\154\075\143\076" +
    "\165\077\144\100\171\001\002\000\004\027\266\001\002" +
    "\000\050\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\023\uff86\025\uff86\027\uff86\030\uff86\031" +
    "\uff86\001\002\000\126\002\uffd0\015\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\001\002" +
    "\000\004\026\271\001\002\000\004\027\272\001\002\000" +
    "\050\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\001\002\000\004\025\ufff9\001\002\000\004\033\uffcd\001" +
    "\002\000\052\015\132\024\133\026\127\043\147\044\141" +
    "\056\145\057\136\061\134\062\166\063\123\064\153\065" +
    "\156\066\162\067\157\073\176\074\154\075\143\076\165" +
    "\077\144\100\171\001\002\000\042\004\210\005\220\006" +
    "\212\007\221\010\213\011\206\013\204\014\222\015\203" +
    "\016\214\017\205\020\207\021\211\022\215\027\277\030" +
    "\217\001\002\000\050\004\uff88\005\uff88\006\uff88\007\uff88" +
    "\010\uff88\011\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\025\uff88\027\uff88" +
    "\030\uff88\031\uff88\001\002\000\004\026\301\001\002\000" +
    "\052\015\132\024\133\026\127\043\147\044\141\056\145" +
    "\057\136\061\134\062\166\063\123\064\153\065\156\066" +
    "\162\067\157\073\176\074\154\075\143\076\165\077\144" +
    "\100\171\001\002\000\042\004\210\005\220\006\212\007" +
    "\221\010\213\011\206\013\204\014\222\015\203\016\214" +
    "\017\205\020\207\021\211\022\215\027\uffb9\030\217\001" +
    "\002\000\004\027\304\001\002\000\074\015\132\024\133" +
    "\025\uffc1\026\127\032\117\043\147\044\141\047\131\050" +
    "\160\051\140\053\142\054\150\055\130\056\145\057\136" +
    "\060\174\061\134\062\166\063\123\064\153\065\156\066" +
    "\162\067\157\073\176\074\154\075\143\076\165\077\144" +
    "\100\171\001\002\000\100\015\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\032\uffb8\033\uffb8\043\uffb8\044\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\001\002\000\052\015\132\024\133\026\127" +
    "\043\147\044\141\056\145\057\136\061\134\062\166\063" +
    "\123\064\153\065\156\066\162\067\157\073\176\074\154" +
    "\075\143\076\165\077\144\100\171\001\002\000\042\004" +
    "\210\005\220\006\212\007\221\010\213\011\206\013\204" +
    "\014\222\015\203\016\214\017\205\020\207\021\211\022" +
    "\215\027\310\030\217\001\002\000\050\004\uff89\005\uff89" +
    "\006\uff89\007\uff89\010\uff89\011\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\025\uff89\027\uff89\030\uff89\031\uff89\001\002\000\052\015" +
    "\132\024\133\026\127\043\147\044\141\056\145\057\136" +
    "\061\134\062\166\063\123\064\153\065\156\066\162\067" +
    "\157\073\176\074\154\075\143\076\165\077\144\100\171" +
    "\001\002\000\042\004\210\005\220\006\212\007\221\010" +
    "\213\011\206\013\204\014\222\015\203\016\214\017\205" +
    "\020\207\021\211\022\215\027\313\030\217\001\002\000" +
    "\050\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\025\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\001\002\000\052\015\132\024\133\026\127\043\147\044" +
    "\141\056\145\057\136\061\134\062\166\063\123\064\153" +
    "\065\156\066\162\067\157\073\176\074\154\075\143\076" +
    "\165\077\144\100\171\001\002\000\042\004\210\005\220" +
    "\006\212\007\221\010\213\011\206\013\204\014\222\015" +
    "\203\016\214\017\205\020\207\021\211\022\215\027\316" +
    "\030\217\001\002\000\050\004\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\001\002\000\006\027\ufff4\073\ufff4" +
    "\001\002\000\100\015\uffb2\024\uffb2\025\uffb2\026\uffb2\032" +
    "\uffb2\033\uffb2\043\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\001\002\000\050\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\025\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\001\002\000\004\025\323\001\002\000" +
    "\100\015\uffb3\024\uffb3\025\uffb3\026\uffb3\032\uffb3\033\uffb3" +
    "\043\uffb3\044\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\001\002" +
    "\000\052\015\132\024\133\026\127\043\147\044\141\056" +
    "\145\057\136\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\042\004\210\005\220\006\212" +
    "\007\221\010\213\011\206\013\204\014\222\015\203\016" +
    "\214\017\205\020\207\021\211\022\215\027\uffc0\030\217" +
    "\001\002\000\004\027\327\001\002\000\074\015\132\024" +
    "\133\025\uffc1\026\127\032\117\043\147\044\141\047\131" +
    "\050\160\051\140\053\142\054\150\055\130\056\145\057" +
    "\136\060\174\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\100\015\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\032\uffbf\033\uffbf\043\uffbf\044\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\001\002\000\100\015\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\032\uffbb\033\uffbb\043\uffbb\044\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\332\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\100\uffbb\001\002\000\074\015\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\032\uffbd\043\uffbd\044\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\100\uffbd\001\002\000\100\015\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\032\uffbe\033\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\001\002\000\074\015\132\024\133\025\uffc1" +
    "\026\127\032\117\043\147\044\141\047\131\050\160\051" +
    "\140\053\142\054\150\055\130\056\145\057\136\060\174" +
    "\061\134\062\166\063\123\064\153\065\156\066\162\067" +
    "\157\073\176\074\154\075\143\076\165\077\144\100\171" +
    "\001\002\000\100\015\uffbc\024\uffbc\025\uffbc\026\uffbc\032" +
    "\uffbc\033\uffbc\043\uffbc\044\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\001\002\000\052\015\132\024\133\026\127\043\147" +
    "\044\141\056\145\057\136\061\134\062\166\063\123\064" +
    "\153\065\156\066\162\067\157\073\176\074\154\075\143" +
    "\076\165\077\144\100\171\001\002\000\042\004\210\005" +
    "\220\006\212\007\221\010\213\011\206\013\204\014\222" +
    "\015\203\016\214\017\205\020\207\021\211\022\215\023" +
    "\340\030\217\001\002\000\014\035\007\036\020\037\014" +
    "\040\016\073\012\001\002\000\004\027\342\001\002\000" +
    "\050\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\001\002\000\100\015\uffcb\024\uffcb\025\uffcb\026\uffcb\032" +
    "\uffcb\033\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100" +
    "\uffcb\001\002\000\004\026\345\001\002\000\004\027\346" +
    "\001\002\000\050\004\uff92\005\uff92\006\uff92\007\uff92\010" +
    "\uff92\011\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\025\uff92\027\uff92\030" +
    "\uff92\031\uff92\001\002\000\050\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\020\uff94\021\uff94\022\215\023\uff94\025\uff94" +
    "\027\uff94\030\uff94\031\uff94\001\002\000\050\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\214\017\205\020\uff9d\021\211\022\215\023" +
    "\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\001\002\000\054" +
    "\015\132\024\133\025\uffc1\026\127\043\147\044\141\056" +
    "\145\057\136\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\004\025\353\001\002\000\052" +
    "\015\uffb7\024\uffb7\026\uffb7\043\uffb7\044\uffb7\056\uffb7\057" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100" +
    "\uffb7\001\002\000\052\015\132\024\133\026\127\043\147" +
    "\044\141\056\145\057\136\061\134\062\166\063\123\064" +
    "\153\065\156\066\162\067\157\073\176\074\154\075\143" +
    "\076\165\077\144\100\171\001\002\000\042\004\210\005" +
    "\220\006\212\007\221\010\213\011\206\013\204\014\222" +
    "\015\203\016\214\017\205\020\207\021\211\022\215\025" +
    "\uffb6\030\217\001\002\000\004\025\357\001\002\000\054" +
    "\015\132\024\133\026\127\027\uffc1\043\147\044\141\056" +
    "\145\057\136\061\134\062\166\063\123\064\153\065\156" +
    "\066\162\067\157\073\176\074\154\075\143\076\165\077" +
    "\144\100\171\001\002\000\004\027\uffb5\001\002\000\004" +
    "\027\362\001\002\000\074\015\132\024\133\025\uffc1\026" +
    "\127\032\117\043\147\044\141\047\131\050\160\051\140" +
    "\053\142\054\150\055\130\056\145\057\136\060\174\061" +
    "\134\062\166\063\123\064\153\065\156\066\162\067\157" +
    "\073\176\074\154\075\143\076\165\077\144\100\171\001" +
    "\002\000\100\015\uffb4\024\uffb4\025\uffb4\026\uffb4\032\uffb4" +
    "\033\uffb4\043\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\001\002\000\100\015\uffb1\024\uffb1\025\uffb1\026\uffb1\032" +
    "\uffb1\033\uffb1\043\uffb1\044\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\001\002\000\042\004\210\005\220\006\212\007\221" +
    "\010\213\011\206\013\204\014\222\015\203\016\214\017" +
    "\205\020\207\021\211\022\215\027\366\030\217\001\002" +
    "\000\050\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\025\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\001\002\000\004\026\370\001\002\000\004\027\371" +
    "\001\002\000\050\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\011\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\025\uff90\027\uff90\030" +
    "\uff90\031\uff90\001\002\000\006\027\ufff6\073\ufff6\001\002" +
    "\000\004\002\000\001\002\000\006\027\ufff8\073\ufff8\001" +
    "\002\000\004\002\uffff\001\002\000\124\002\ufffa\015\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa" +
    "\001\002\000\006\025\ufff9\026\ufff1\001\002\000\004\026" +
    "\u0101\001\002\000\016\027\uffea\035\007\036\020\037\014" +
    "\040\016\073\012\001\002\000\004\027\ufff0\001\002\000" +
    "\004\027\u0104\001\002\000\004\032\117\001\002\000\034" +
    "\002\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\070\uffef\071\uffef\072\uffef\073\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\022\025\012\026\005\027\010\030\004\032" +
    "\021\033\016\034\007\041\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\025\374\026\005\027\010\030" +
    "\004\032\021\033\016\034\007\041\003\001\001\000\004" +
    "\035\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\316\001\001\000\002\001\001\000\004\035\371" +
    "\001\001\000\002\001\001\000\004\035\107\001\001\000" +
    "\002\001\001\000\004\035\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\024\001" +
    "\001\000\004\002\026\001\001\000\002\001\001\000\004" +
    "\003\027\001\001\000\002\001\001\000\004\004\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\034" +
    "\001\001\000\002\001\001\000\010\005\036\006\040\042" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\046\001\001\000\012\027\044\030\004\032\045\041" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\047\006\040\042" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\056\010\057\041" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\060\010\057\041\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\064\036\066\041\065\001\001\000\004\037\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\074\041" +
    "\065\001\001\000\002\001\001\000\004\037\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\064\036" +
    "\100\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\111\001\001\000\002\001\001\000\010\031" +
    "\064\036\113\041\065\001\001\000\004\054\114\001\001" +
    "\000\002\001\001\000\004\011\117\001\001\000\004\012" +
    "\120\001\001\000\002\001\001\000\044\011\145\013\171" +
    "\014\162\015\151\017\136\020\124\021\121\022\172\023" +
    "\167\027\160\030\004\040\125\041\163\043\123\044\154" +
    "\047\134\050\166\001\001\000\002\001\001\000\004\071" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\123\044\364\050\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\123\044\347" +
    "\050\166\001\001\000\010\043\123\044\346\050\166\001" +
    "\001\000\004\070\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\043\123\044\154\047\321\050\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\316\073\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\011\145\013\273\014\162" +
    "\015\151\017\136\020\124\021\121\022\172\023\167\040" +
    "\125\043\123\044\154\047\134\050\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\043" +
    "\123\044\176\046\177\050\166\001\001\000\004\073\260" +
    "\001\001\000\004\067\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\123\044\257" +
    "\050\166\001\001\000\010\043\123\044\256\050\166\001" +
    "\001\000\010\043\123\044\255\050\166\001\001\000\010" +
    "\043\123\044\254\050\166\001\001\000\010\043\123\044" +
    "\253\050\166\001\001\000\010\043\123\044\252\050\166" +
    "\001\001\000\010\043\123\044\251\050\166\001\001\000" +
    "\010\043\123\044\250\050\166\001\001\000\010\043\123" +
    "\044\247\050\166\001\001\000\010\043\123\044\246\050" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\123\044\225\050\166\001\001\000\010\043\123\044" +
    "\224\050\166\001\001\000\010\043\123\044\223\050\166" +
    "\001\001\000\010\043\123\044\222\050\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\123\044\230\050" +
    "\166\001\001\000\002\001\001\000\012\043\123\044\176" +
    "\046\232\050\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\237\043\123\044\240\045\241\050\166" +
    "\001\001\000\010\043\123\044\236\050\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\043\123\044" +
    "\240\045\244\050\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\123\044\262" +
    "\050\166\001\001\000\002\001\001\000\014\024\264\043" +
    "\123\044\240\045\241\050\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\123\044\275\050\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\123\044\301\050\166\001\001\000\004\063\302\001" +
    "\001\000\002\001\001\000\034\011\145\014\304\015\151" +
    "\017\136\020\124\021\121\022\172\023\167\040\125\043" +
    "\123\044\154\047\134\050\166\001\001\000\002\001\001" +
    "\000\010\043\123\044\306\050\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\123\044\311\050\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\043" +
    "\123\044\314\050\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\123" +
    "\044\324\050\166\001\001\000\004\057\325\001\001\000" +
    "\002\001\001\000\034\011\145\014\327\015\151\017\136" +
    "\020\124\021\121\022\172\023\167\040\125\043\123\044" +
    "\154\047\134\050\166\001\001\000\004\060\330\001\001" +
    "\000\004\016\332\001\001\000\004\061\333\001\001\000" +
    "\002\001\001\000\034\011\145\014\334\015\151\017\136" +
    "\020\124\021\121\022\172\023\167\040\125\043\123\044" +
    "\154\047\134\050\166\001\001\000\002\001\001\000\010" +
    "\043\123\044\336\050\166\001\001\000\002\001\001\000" +
    "\004\041\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\043\123\044\154\047\351\050\166\001\001\000\002\001" +
    "\001\000\004\064\353\001\001\000\010\043\123\044\354" +
    "\050\166\001\001\000\004\065\355\001\001\000\002\001" +
    "\001\000\012\043\123\044\154\047\357\050\166\001\001" +
    "\000\004\066\360\001\001\000\002\001\001\000\034\011" +
    "\145\014\362\015\151\017\136\020\124\021\121\022\172" +
    "\023\167\040\125\043\123\044\154\047\134\050\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\377\001\001\000\002\001\001\000\010\031\064\036\u0101" +
    "\041\065\001\001\000\004\052\u0102\001\001\000\002\001" +
    "\001\000\004\011\u0104\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Lexer lexer;
    public parser(Lexer lexer) {
        this.lexer = lexer;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Decl Program 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VariableDecl ::= Variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Variable ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                DSCP dscp = new DSCP(type);
                Spaghetti.addEntry(id, dscp);
                SemanticStack.push(type);
                SemanticStack.push(id);
                CodeGen.cgen("varDecl");
                Spaghetti.currIDwoAccessMode = id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INT Brackets 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE Brackets 
            {
              String RESULT =null;
		 RESULT = "DOUBLE"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOL Brackets 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING Brackets 
            {
              String RESULT =null;
		 RESULT = "STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= IDENT Brackets 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Brackets ::= LBRACK RBRACK Brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Brackets",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Brackets ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Brackets",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Spaghetti.enterScope(id);
                CodeGen.textSeg += id + ":\n";
                DSCP funcdscp = new FunctionDSCP(t);
                Spaghetti.addEntry(id, funcdscp);
                Spaghetti.currIDwoAccessMode = id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                ArgumentChecker.declReset(id);
                ArgumentChecker.popArguments();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type IDENT NT$0 LPAREN Formals NT$1 RPAREN StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Spaghetti.exitScope();
                if(id.equals("main") && t.equals("INT"))
                    CodeGen.cgen("endMain");
                else
                    CodeGen.cgen("endFunc");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Spaghetti.enterScope(id);
                CodeGen.textSeg += id + ":\n";
                DSCP funcdscp = new FunctionDSCP(t);
                Spaghetti.addEntry(id, funcdscp);
                ArgumentChecker.declReset(id);
                ArgumentChecker.popArguments();
                Spaghetti.currIDwoAccessMode = id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                ArgumentChecker.declReset(id);
                ArgumentChecker.popArguments();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= VOID IDENT NT$2 LPAREN Formals NT$3 RPAREN StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Spaghetti.exitScope();
                CodeGen.cgen("endFunc");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= FuncVariable VarComma1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarComma1 ::= COMMA FuncVariable VarComma1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarComma1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarComma1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarComma1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FuncVariable ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Spaghetti.current.addArgToDSCP(id, type);
                SemanticStack.push(type);
                SemanticStack.push(id);
                CodeGen.cgen("varDecl");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncVariable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Spaghetti.enterScope(id);
                CodeGen.textSeg += id + ":\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT NT$4 Extends01 Implements01 LCURLY Field01 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Extends01 ::= EXTENDS IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends01",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Extends01 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends01",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Implements01 ::= IMPLEMENTS Ident1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Implements01",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Implements01 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Implements01",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ident1 ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ident1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ident1 ::= IDENT COMMA Ident1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ident1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =null;


            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field01 ::= Field NT$5 Field01 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field01",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field01 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field01",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= AccessMode VariableDecl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Spaghetti.setAccessMode(Spaghetti.currIDwoAccessMode,a);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= AccessMode FunctionDecl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Spaghetti.enterScope(Spaghetti.currIDwoAccessMode);
                Spaghetti.setAccessMode(Spaghetti.currIDwoAccessMode,a);
                Spaghetti.exitScope();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AccessMode ::= PRIVATE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AccessMode ::= PROTECTED 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AccessMode ::= PUBLIC 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccessMode ::= 
            {
              String RESULT =null;
		 RESULT = "protected"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InterfaceDecl ::= INTERFACE IDENT LCURLY Prototype1 RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype1 ::= Prototype Prototype1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Prototype ::= Type IDENT LPAREN Formals RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Prototype ::= VOID IDENT LPAREN Formals RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtBlock ::= LCURLY VariableDecl0 Stmt0 RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VariableDecl0 ::= VariableDecl0 VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VariableDecl0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt0 ::= Stmt Stmt0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= Expr01 SEMICOLON 
            {
              Object RESULT =null;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr01 ::= Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr01",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr01 ::= 
            {
              Expression RESULT =null;
		 RESULT = new Constant(null, "VOID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr01",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                SemanticStack.push(e);
                CodeGen.cgen("condExpr");
                CodeGen.textSeg += "  beq $t2, $zero, L" + CodeGen.label + "\n";
                CodeGen.label++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                CodeGen.textSeg += "  j LEnd" + CodeGen.endlabel + "\n";
                CodeGen.endlabel++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfStmt ::= IF LPAREN Expr NT$6 RPAREN Stmt NT$7 ElseStmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                if(CodeGen.endlabel > CodeGen.maxendlabel)
                    CodeGen.maxendlabel = CodeGen.endlabel;
                CodeGen.endlabel--;
                CodeGen.textSeg += "LEnd" + CodeGen.endlabel+ ": \n";
                if(CodeGen.endlabel == 0)
                    CodeGen.endlabel = CodeGen.maxendlabel;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$8 ::= 
            {
              Object RESULT =null;

                CodeGen.textSeg += "L" + (CodeGen.label - 1) + ": \n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ElseStmt ::= ELSE NT$8 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ElseStmt ::= 
            {
              Object RESULT =null;
		
                CodeGen.textSeg += "L" + (CodeGen.label - 1) + ": \n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$9 ::= 
            {
              Object RESULT =null;

                CodeGen.textSeg += "L" + CodeGen.label + ": \n";
                CodeGen.startlabel = CodeGen.label;
                CodeGen.label++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                SemanticStack.push(e);
                CodeGen.cgen("condExpr");
                CodeGen.textSeg += "  beq $t2, $zero, LEnd" + CodeGen.endlabel + "\n";
                CodeGen.endlabel++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WhileStmt ::= WHILE NT$9 LPAREN Expr NT$10 RPAREN Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                CodeGen.textSeg += "  j L" + CodeGen.startlabel + "\n";
                CodeGen.textSeg += "LEnd" + (CodeGen.endlabel-1) + ": \n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$11 ::= 
            {
              Object RESULT =null;

                CodeGen.cgen(";");
                CodeGen.textSeg += "L" + CodeGen.label + ": \n"; //start-1
                CodeGen.label++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                SemanticStack.push(e1);
                CodeGen.cgen("condExpr");
                CodeGen.textSeg += "  beq $t2, $zero, LEnd" + CodeGen.endlabel + "\n";
                CodeGen.endlabel++;

                CodeGen.textSeg += "  j L" + (CodeGen.label+1) + "\n"; //jump to start+1 (start of stmt)
                CodeGen.textSeg += "L" + CodeGen.label + ": \n";
                CodeGen.startlabel = CodeGen.label; //start is set to start of 3rd expr
                CodeGen.label++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                CodeGen.cgen(";");
                CodeGen.textSeg += "  j L" + (CodeGen.startlabel-1) + "\n"; //jump to start-1 (2nd expr)
                CodeGen.textSeg += "L" + CodeGen.label + ": \n";
                CodeGen.label++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ForStmt ::= FOR LPAREN Expr01 SEMICOLON NT$11 Expr NT$12 SEMICOLON Expr01 NT$13 RPAREN Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                CodeGen.textSeg += "  j L" + CodeGen.startlabel + "\n"; //jump to 3rd expr
                CodeGen.textSeg += "LEnd" + (CodeGen.endlabel-1) + ": \n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ReturnStmt ::= RETURN Expr01 SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String t1 = Spaghetti.current.getReturnType();
                TypeChecker.canReturn(t1, e.getType());
                if(e instanceof Constant){
                    if(e.getType().equals("INT") || e.getType().equals("BOOL"))
                        CodeGen.textSeg += "  li $v0, " + e.getValue() + "\n";
                    else if(e.getType().equals("DOUBLE")){
                        CodeGen.textSeg += "  li.d $f4, " + e.getValue() + "\n";
                        CodeGen.textSeg += "  sub $sp, $sp, 8\n  s.d $f4, 0($sp)\n";
                    }
                }
                else if(e instanceof DSCP){
                    String id = (String) SemanticStack.pop();
                    if (e.getType().equals("INT") || e.getType().equals("BOOL")) {
                        CodeGen.textSeg += "  lw $v0, " + id + "_" + Spaghetti.getScope(id) + "($zero)\n";
                    }
                    else if (e.getType().equals("DOUBLE")) {
                        CodeGen.textSeg += "  l.d $f4, " + id + "_" + Spaghetti.getScope(id) + "($zero)\n";
                        CodeGen.textSeg += "  sub $sp, $sp, 8\n  s.d $f4, 0($sp)\n";
                    }
                }
                else if(e instanceof ArithLogExpr){
                    if(e.getType().equals("INT") || e.getType().equals("BOOL"))
                        CodeGen.textSeg += "  move $v0, $t2 \n";
                    else if(e.getType().equals("DOUBLE")){
                        CodeGen.textSeg += "  sub $sp, $sp, 8\n  s.d $f4, 0($sp)\n";
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BreakStmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 CodeGen.textSeg += "  j LEnd" + (CodeGen.endlabel - 1) +"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ContinueStmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		 CodeGen.textSeg += "  j L" + CodeGen.startlabel +"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PrintStmt ::= PRINT LPAREN ExprPrintComma1 RPAREN SEMICOLON 
            {
              Object RESULT =null;
		CodeGen.cgen("PrintNL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExprPrintComma1 ::= Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                SemanticStack.push(e);
                if(TypeChecker.hasPrintOp(e.getType()))
                    CodeGen.cgen("Print");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrintComma1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                SemanticStack.push(e);
                if(TypeChecker.hasPrintOp(e.getType()))
                    CodeGen.cgen("Print");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprPrintComma1 ::= Expr NT$14 COMMA ExprPrintComma1 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrintComma1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= IDENT ASSIGN Expr 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Assignment.assign(id,e);
                RESULT = Spaghetti.getDSCP(id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr LBRACK Expr RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!e.getType().equals("INT")) throw new SemanticError("array index should be int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr LBRACK Expr RBRACK ASSIGN Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(!e.getType().equals("INT")) throw new SemanticError("array index should be int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Constant 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= IDENT 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                DSCP dscp = Spaghetti.getDSCP(id);
                if(dscp == null)
                    throw new SemanticError("variable " + id + " doesn't exist");
                else
                {
                    SemanticStack.push(id);
                    RESULT = dscp;
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr DOT IDENT 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*DSCP dscp = Spaghetti.getDSCP(id);
                if(CodeGen.isThis){
                    dscp = Spaghetti.getParentDSCP(id);
                }
                if(dscp == null)
                    throw new SemanticError("variable " + id + " doesn't exist");
                else
                {
                    SemanticStack.push(".");
                    SemanticStack.push(id);
                    RESULT = dscp;
                }*/
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr DOT IDENT ASSIGN Expr 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*DSCP dscp = Spaghetti.getDSCP(id);
                if(CodeGen.isThis){
                    dscp = Spaghetti.getParentDSCP(id);
                }
                if(dscp == null)
                    throw new SemanticError("variable " + id + " doesn't exist");
                else
                {
                    SemanticStack.push(".");
                    SemanticStack.push(id);
                    //Assignment.assign(id,e);
                    //RESULT = Spaghetti.getDSCP(id);
                }*/
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= THIS 
            {
              Expression RESULT =null;
		SemanticStack.push("this");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr PLUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,e1.getType());
                if(TypeChecker.hasSumOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr MINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,e1.getType());
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr PROD Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,e1.getType());
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr DIV Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,e1.getType());
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr MOD Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,e1.getType());
                if(TypeChecker.hasModOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= MINUS Expr 
            {
              Expression RESULT =null;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Constant e1 = new Constant(0, e2.getType());
                RESULT = new ArithLogExpr(e1,e2,e1.getType());
                CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr LT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= Expr LE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= Expr GT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= Expr GE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasArithCompOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= Expr EQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasEqualOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= Expr NE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasEqualOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= Expr AND Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                if(TypeChecker.hasLogicOp(e1.getType(),e2.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= Expr OR Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e2,"BOOL");
                 if(TypeChecker.hasLogicOp(e1.getType(),e2.getType()))
                     CodeGen.cgen(sem);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= NOT Expr 
            {
              Expression RESULT =null;
		int semleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int semright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArithLogExpr(e1,e1,"BOOL");
                if(TypeChecker.hasLogicOp(e1.getType(),e1.getType()))
                    CodeGen.cgen(sem);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$15 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 CodeGen.cgen(s); RESULT = new Read("INT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= READINTEGER NT$15 LPAREN RPAREN 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$16 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 CodeGen.cgen(s); RESULT = new Read("STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= READLINE NT$16 LPAREN RPAREN 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$17 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 CodeGen.cgen(s); RESULT = new Read("DOUBLE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expr ::= READDOUBLE NT$17 LPAREN RPAREN 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= NEW IDENT 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expr ::= NEWARRAY LPAREN Expr COMMA Type RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(!e.getType().equals("INT")) throw new SemanticError("array index should be int");
                if(!(t.equals("INT") || t.equals("BOOL") || t.equals("DOUBLE") || t.equals("STRING")))
                    throw new SemanticError("bad array type");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr ::= ITOD LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(e.getType().equals("INT")){
                    if(e instanceof Constant){
                        CodeGen.textSeg += "  li $t2, " + e.getValue() +"\n";
                    }
                    else if(e instanceof DSCP){
                        String id = (String) SemanticStack.pop();
                        CodeGen.textSeg += "  lw $t2, " + id + "_" + Spaghetti.getScope(id) + "($zero)\n";
                    }
                    CodeGen.cgen(s);
                    RESULT = new ArithLogExpr("DOUBLE");
                }
                else
                    throw new SemanticError("can't cast");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= DTOI LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(e.getType().equals("DOUBLE")){
                    if(e instanceof Constant){
                        CodeGen.textSeg += "  li.s $f4, " + e.getValue() +"\n";
                    }
                    else if(e instanceof DSCP){
                        String id = (String) SemanticStack.pop();
                        CodeGen.textSeg += "  l.s $f4, " + id + "_" + Spaghetti.getScope(id) + "($zero)\n";
                    }
                    CodeGen.cgen(s);
                    RESULT = new ArithLogExpr("INT");
                }
                else
                    throw new SemanticError("can't cast");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= ITOB LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(e.getType().equals("INT")){
                    if(e instanceof Constant){
                        CodeGen.textSeg += "  li $t2, " + e.getValue() +"\n";
                    }
                    else if(e instanceof DSCP){
                        String id = (String) SemanticStack.pop();
                        CodeGen.textSeg += "  lw $t2, " + id + "_" + Spaghetti.getScope(id) + "($zero)\n";
                    }
                    CodeGen.cgen(s);
                    RESULT = new ArithLogExpr("BOOL");
                }
                else
                    throw new SemanticError("can't cast");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr ::= BTOI LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(e.getType().equals("BOOL")){
                    if(e instanceof Constant){
                        CodeGen.textSeg += "  li $t2, " + e.getValue() +"\n";
                    }
                    else if(e instanceof DSCP){
                        String id = (String) SemanticStack.pop();
                        CodeGen.textSeg += "  lw $t2, " + id + "_" + Spaghetti.getScope(id) + "($zero)\n";
                    }
                    RESULT = new ArithLogExpr("INT");
                }
                else
                    throw new SemanticError("can't cast");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$18 ::= 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ArgumentChecker.callReset(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Call ::= IDENT NT$18 LPAREN Actuals RPAREN 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                ArgumentChecker.completeArgs();
                RESULT = new ArithLogExpr(Spaghetti.getFunctionDSCP(id).getType());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Call ::= Expr DOT IDENT LPAREN Actuals RPAREN 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Actuals ::= ExprComma1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExprComma1 ::= Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgumentChecker.checkArgument(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprComma1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$19 ::= 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ArgumentChecker.checkArgument(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExprComma1 ::= Expr NT$19 COMMA ExprComma1 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprComma1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Constant ::= INTLITERAL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Constant(Integer.parseInt(n), "INT");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Constant ::= DOUBLELITERAL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Constant(Double.parseDouble(n), "DOUBLE");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Constant ::= TRUE 
            {
              Expression RESULT =null;
		
                RESULT = new Constant(1, "BOOL");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Constant ::= FALSE 
            {
              Expression RESULT =null;
		
                RESULT = new Constant(0, "BOOL");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Constant ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Constant(n, "STRING");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Constant ::= NULL 
            {
              Expression RESULT =null;
		
                RESULT = new Constant(null, "NULL");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
