// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.flex
package compiler;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\0\1\23\1\24\1\25\1\26\2\0\1\27\3\30"+
    "\1\31\1\30\2\32\1\33\2\32\1\34\1\32\1\35"+
    "\1\32\1\36\1\32\1\37\5\32\1\40\2\32\1\41"+
    "\1\42\1\43\1\0\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\32\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\32\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\32\1\74"+
    "\1\75\1\76\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\4\24\1\25\1\26"+
    "\15\24\1\27\1\2\1\30\1\1\1\31\1\32\1\33"+
    "\1\34\1\35\1\0\1\3\1\36\1\0\1\37\1\40"+
    "\1\41\16\24\1\42\15\24\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\0\1\17\15\24\1\52\1\24"+
    "\1\53\1\24\1\54\12\24\1\0\1\55\3\24\1\56"+
    "\1\24\1\57\3\24\1\60\1\61\4\24\1\62\1\63"+
    "\1\64\5\24\1\65\1\66\1\67\1\24\1\70\1\24"+
    "\1\71\2\24\1\72\1\73\3\24\1\74\7\24\1\75"+
    "\4\24\1\76\5\24\1\77\1\100\1\101\4\24\1\102"+
    "\2\24\1\103\1\24\1\104\1\24\1\105\1\106\5\24"+
    "\1\107\1\110\1\24\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\176\0\275\0\374\0\176\0\176"+
    "\0\u013b\0\176\0\176\0\176\0\176\0\176\0\176\0\176"+
    "\0\u017a\0\u01b9\0\u01f8\0\176\0\u0237\0\u0276\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\176\0\176\0\u03f0\0\u042f\0\u046e"+
    "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\176\0\u0723\0\176\0\u0762\0\176\0\176"+
    "\0\u07a1\0\176\0\176\0\u07e0\0\u081f\0\u085e\0\u089d\0\176"+
    "\0\176\0\176\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u02f4\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\176\0\176"+
    "\0\176\0\176\0\176\0\176\0\176\0\u0f81\0\u0fc0\0\u089d"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u02f4\0\u1332\0\u1371"+
    "\0\u13b0\0\u02f4\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u02f4\0\u17a0\0\u02f4\0\u17df\0\u181e\0\u185d\0\u02f4"+
    "\0\u02f4\0\u189c\0\u18db\0\u191a\0\u1959\0\u02f4\0\u02f4\0\u02f4"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u02f4\0\u02f4\0\u02f4"+
    "\0\u1ad3\0\u1665\0\u1b12\0\u02f4\0\u1b51\0\u1b90\0\u02f4\0\u02f4"+
    "\0\u1bcf\0\u1c0e\0\u1c4d\0\u02f4\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u1d88\0\u1dc7\0\u1e06\0\u02f4\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u02f4\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u02f4\0\u02f4"+
    "\0\u02f4\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u02f4\0\u2178\0\u21b7"+
    "\0\u02f4\0\u21f6\0\u02f4\0\u2235\0\u02f4\0\u02f4\0\u2274\0\u22b3"+
    "\0\u22f2\0\u2331\0\u2370\0\u02f4\0\u02f4\0\u23af\0\u02f4\0\u02f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\6\30\1\31"+
    "\1\32\1\33\1\30\1\34\1\3\1\35\1\3\1\30"+
    "\1\36\1\37\1\40\1\41\1\42\2\30\1\43\3\30"+
    "\1\44\1\30\1\45\1\46\1\47\1\50\1\30\1\51"+
    "\1\52\2\30\1\53\1\54\1\55\2\56\2\57\1\56"+
    "\1\60\34\56\1\61\34\56\101\0\1\4\121\0\1\62"+
    "\60\0\1\63\102\0\1\64\4\0\1\65\75\0\1\66"+
    "\1\0\2\23\15\0\1\67\31\0\1\67\23\0\1\66"+
    "\1\0\2\23\101\0\1\70\76\0\1\71\76\0\1\72"+
    "\72\0\2\30\4\0\12\30\3\0\30\30\24\0\2\30"+
    "\4\0\12\30\3\0\5\30\1\73\22\30\24\0\2\30"+
    "\4\0\12\30\3\0\20\30\1\74\7\30\24\0\2\30"+
    "\4\0\12\30\3\0\5\30\1\75\22\30\24\0\2\30"+
    "\4\0\12\30\3\0\16\30\1\76\1\30\1\77\1\30"+
    "\1\100\5\30\24\0\2\30\4\0\12\30\3\0\13\30"+
    "\1\101\2\30\1\102\11\30\24\0\2\30\4\0\12\30"+
    "\3\0\16\30\1\103\3\30\1\104\5\30\24\0\2\30"+
    "\4\0\12\30\3\0\13\30\1\105\12\30\1\106\1\30"+
    "\24\0\2\30\4\0\12\30\3\0\1\30\1\107\14\30"+
    "\1\110\11\30\24\0\2\30\4\0\12\30\3\0\6\30"+
    "\1\111\5\30\1\112\1\113\4\30\1\114\5\30\24\0"+
    "\2\30\4\0\12\30\3\0\5\30\1\115\15\30\1\116"+
    "\4\30\24\0\2\30\4\0\12\30\3\0\20\30\1\117"+
    "\2\30\1\120\4\30\24\0\2\30\4\0\12\30\3\0"+
    "\5\30\1\121\22\30\24\0\2\30\4\0\12\30\3\0"+
    "\22\30\1\122\5\30\24\0\2\30\4\0\12\30\3\0"+
    "\10\30\1\123\7\30\1\124\7\30\24\0\2\30\4\0"+
    "\12\30\3\0\16\30\1\125\11\30\24\0\2\30\4\0"+
    "\12\30\3\0\10\30\1\126\17\30\100\0\1\127\1\0"+
    "\2\56\2\0\1\56\1\0\34\56\1\0\34\56\5\0"+
    "\1\130\2\0\1\131\10\0\1\132\24\0\1\133\3\0"+
    "\1\134\13\0\1\135\10\0\13\64\1\136\63\64\2\65"+
    "\2\0\73\65\21\0\2\66\6\0\1\137\17\0\1\137"+
    "\46\0\2\140\4\0\3\140\13\0\6\140\45\0\2\30"+
    "\4\0\12\30\3\0\25\30\1\141\2\30\24\0\2\30"+
    "\4\0\12\30\3\0\11\30\1\142\16\30\24\0\2\30"+
    "\4\0\12\30\3\0\1\30\1\143\26\30\24\0\2\30"+
    "\4\0\12\30\3\0\16\30\1\144\11\30\24\0\2\30"+
    "\4\0\12\30\3\0\5\30\1\145\22\30\24\0\2\30"+
    "\4\0\12\30\3\0\16\30\1\146\11\30\24\0\2\30"+
    "\4\0\12\30\3\0\1\30\1\147\26\30\24\0\2\30"+
    "\4\0\12\30\3\0\15\30\1\150\12\30\24\0\2\30"+
    "\4\0\12\30\3\0\23\30\1\151\4\30\24\0\2\30"+
    "\4\0\12\30\3\0\16\30\1\152\11\30\24\0\2\30"+
    "\4\0\12\30\3\0\21\30\1\153\6\30\24\0\2\30"+
    "\4\0\12\30\3\0\22\30\1\154\5\30\24\0\2\30"+
    "\4\0\12\30\3\0\13\30\1\155\14\30\24\0\2\30"+
    "\4\0\12\30\3\0\20\30\1\156\7\30\24\0\2\30"+
    "\4\0\12\30\3\0\17\30\1\157\10\30\24\0\2\30"+
    "\4\0\12\30\3\0\22\30\1\160\5\30\24\0\2\30"+
    "\4\0\12\30\3\0\16\30\1\161\11\30\24\0\2\30"+
    "\4\0\12\30\3\0\25\30\1\162\2\30\24\0\2\30"+
    "\4\0\12\30\3\0\13\30\1\163\14\30\24\0\2\30"+
    "\4\0\12\30\3\0\11\30\1\164\4\30\1\165\11\30"+
    "\24\0\2\30\4\0\12\30\3\0\2\30\1\166\25\30"+
    "\24\0\2\30\4\0\12\30\3\0\22\30\1\167\5\30"+
    "\24\0\2\30\4\0\12\30\3\0\20\30\1\170\7\30"+
    "\24\0\2\30\4\0\12\30\3\0\11\30\1\171\16\30"+
    "\24\0\2\30\4\0\12\30\3\0\23\30\1\172\4\30"+
    "\24\0\2\30\4\0\12\30\3\0\11\30\1\173\16\30"+
    "\24\0\2\30\4\0\12\30\3\0\11\30\1\174\16\30"+
    "\3\0\13\64\1\136\4\64\1\4\56\64\14\0\1\175"+
    "\1\0\1\175\2\0\2\176\75\0\2\30\4\0\1\177"+
    "\11\30\3\0\30\30\24\0\2\30\4\0\12\30\3\0"+
    "\15\30\1\200\12\30\24\0\2\30\4\0\12\30\3\0"+
    "\4\30\1\201\23\30\24\0\2\30\4\0\12\30\3\0"+
    "\13\30\1\202\14\30\24\0\2\30\4\0\12\30\3\0"+
    "\1\30\1\203\26\30\24\0\2\30\4\0\12\30\3\0"+
    "\11\30\1\204\16\30\24\0\2\30\4\0\12\30\3\0"+
    "\21\30\1\205\6\30\24\0\2\30\4\0\12\30\3\0"+
    "\22\30\1\206\5\30\24\0\2\30\4\0\12\30\3\0"+
    "\2\30\1\207\25\30\24\0\2\30\4\0\12\30\3\0"+
    "\11\30\1\210\16\30\24\0\2\30\4\0\12\30\3\0"+
    "\5\30\1\211\22\30\24\0\2\30\4\0\12\30\3\0"+
    "\5\30\1\212\22\30\24\0\2\30\4\0\12\30\3\0"+
    "\21\30\1\213\6\30\24\0\2\30\4\0\12\30\3\0"+
    "\13\30\1\214\14\30\24\0\2\30\4\0\12\30\3\0"+
    "\5\30\1\215\22\30\24\0\2\30\4\0\12\30\3\0"+
    "\2\30\1\216\1\30\1\217\23\30\24\0\2\30\4\0"+
    "\12\30\3\0\13\30\1\220\14\30\24\0\2\30\4\0"+
    "\12\30\3\0\24\30\1\221\3\30\24\0\2\30\4\0"+
    "\12\30\3\0\22\30\1\222\5\30\24\0\2\30\4\0"+
    "\12\30\3\0\13\30\1\223\14\30\24\0\2\30\4\0"+
    "\12\30\3\0\23\30\1\224\4\30\24\0\2\30\4\0"+
    "\12\30\3\0\11\30\1\225\16\30\24\0\2\30\4\0"+
    "\12\30\3\0\21\30\1\226\6\30\24\0\2\30\4\0"+
    "\12\30\3\0\5\30\1\227\22\30\24\0\2\30\4\0"+
    "\12\30\3\0\4\30\1\230\23\30\24\0\2\30\4\0"+
    "\12\30\3\0\13\30\1\231\14\30\24\0\2\232\75\0"+
    "\2\176\75\0\2\30\4\0\12\30\3\0\20\30\1\233"+
    "\7\30\24\0\2\30\4\0\12\30\3\0\22\30\1\234"+
    "\5\30\24\0\2\30\4\0\4\30\1\235\1\236\4\30"+
    "\3\0\30\30\24\0\2\30\4\0\12\30\3\0\12\30"+
    "\1\237\15\30\24\0\2\30\4\0\12\30\3\0\21\30"+
    "\1\240\6\30\24\0\2\30\4\0\12\30\3\0\11\30"+
    "\1\241\16\30\24\0\2\30\4\0\12\30\3\0\13\30"+
    "\1\242\14\30\24\0\2\30\4\0\12\30\3\0\15\30"+
    "\1\243\12\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\244\22\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\245\22\30\24\0\2\30\4\0\12\30\3\0\20\30"+
    "\1\246\7\30\24\0\2\30\4\0\12\30\3\0\1\30"+
    "\1\247\26\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\250\22\30\24\0\2\30\4\0\12\30\3\0\11\30"+
    "\1\251\16\30\24\0\2\30\4\0\12\30\3\0\20\30"+
    "\1\252\7\30\24\0\2\30\4\0\12\30\3\0\15\30"+
    "\1\253\12\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\254\22\30\24\0\2\30\4\0\12\30\3\0\20\30"+
    "\1\255\7\30\24\0\2\30\4\0\12\30\3\0\15\30"+
    "\1\256\12\30\24\0\2\30\4\0\12\30\3\0\11\30"+
    "\1\257\16\30\24\0\2\30\4\0\12\30\3\0\15\30"+
    "\1\260\12\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\261\22\30\24\0\2\30\4\0\12\30\3\0\4\30"+
    "\1\262\23\30\24\0\2\30\4\0\12\30\3\0\14\30"+
    "\1\263\13\30\24\0\2\30\4\0\12\30\3\0\6\30"+
    "\1\264\21\30\24\0\2\30\4\0\12\30\3\0\22\30"+
    "\1\265\5\30\24\0\2\30\4\0\12\30\3\0\3\30"+
    "\1\266\24\30\24\0\2\30\4\0\12\30\3\0\3\30"+
    "\1\267\24\30\24\0\2\30\4\0\12\30\3\0\15\30"+
    "\1\270\12\30\24\0\2\30\4\0\12\30\3\0\7\30"+
    "\1\271\20\30\24\0\2\30\4\0\12\30\3\0\1\30"+
    "\1\272\26\30\24\0\2\30\4\0\12\30\3\0\22\30"+
    "\1\273\5\30\24\0\2\30\4\0\12\30\3\0\15\30"+
    "\1\274\12\30\24\0\2\30\4\0\12\30\3\0\23\30"+
    "\1\275\4\30\24\0\2\30\4\0\12\30\3\0\21\30"+
    "\1\276\6\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\277\22\30\24\0\2\30\4\0\12\30\3\0\1\30"+
    "\1\300\26\30\24\0\2\30\4\0\12\30\3\0\5\30"+
    "\1\301\22\30\24\0\2\30\4\0\12\30\3\0\22\30"+
    "\1\302\5\30\24\0\2\30\4\0\12\30\3\0\27\30"+
    "\1\303\24\0\2\30\4\0\12\30\3\0\5\30\1\304"+
    "\22\30\24\0\2\30\4\0\12\30\3\0\5\30\1\305"+
    "\22\30\24\0\2\30\4\0\12\30\3\0\5\30\1\306"+
    "\22\30\24\0\2\30\4\0\12\30\3\0\15\30\1\307"+
    "\12\30\24\0\2\30\4\0\12\30\3\0\3\30\1\310"+
    "\24\30\24\0\2\30\4\0\12\30\3\0\5\30\1\311"+
    "\22\30\24\0\2\30\4\0\12\30\3\0\7\30\1\312"+
    "\20\30\24\0\2\30\4\0\12\30\3\0\22\30\1\313"+
    "\5\30\24\0\2\30\4\0\12\30\3\0\5\30\1\314"+
    "\22\30\24\0\2\30\4\0\12\30\3\0\4\30\1\315"+
    "\23\30\24\0\2\30\4\0\12\30\3\0\5\30\1\316"+
    "\22\30\24\0\2\30\4\0\12\30\3\0\21\30\1\317"+
    "\6\30\24\0\2\30\4\0\12\30\3\0\20\30\1\320"+
    "\7\30\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\2\1\2\11\1\1\7\11\3\1"+
    "\1\11\7\1\2\11\15\1\1\11\1\1\1\11\1\1"+
    "\2\11\1\1\2\11\1\0\2\1\1\0\3\11\34\1"+
    "\7\11\2\0\35\1\1\0\123\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
    private String addPlus(String str)
    {
        int i = str.indexOf('e');
        return str.substring(0, i + 1) + "+" + str.substring(i + 1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol scanToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { string.append(yytext());
            }
            // fall through
          case 75: break;
          case 2:
            { return new Symbol(Token.ERROR , "ERROR");
            }
            // fall through
          case 76: break;
          case 3:
            { 
            }
            // fall through
          case 77: break;
          case 4:
            { return new Symbol(Token.NOT , yytext());
            }
            // fall through
          case 78: break;
          case 5:
            { string = new StringBuilder("\""); yybegin(STRING);
            }
            // fall through
          case 79: break;
          case 6:
            { return new Symbol(Token.MOD , yytext());
            }
            // fall through
          case 80: break;
          case 7:
            { return new Symbol(Token.LPAREN , yytext());
            }
            // fall through
          case 81: break;
          case 8:
            { return new Symbol(Token.RPAREN , yytext());
            }
            // fall through
          case 82: break;
          case 9:
            { return new Symbol(Token.PROD , yytext());
            }
            // fall through
          case 83: break;
          case 10:
            { return new Symbol(Token.ADD , yytext());
            }
            // fall through
          case 84: break;
          case 11:
            { return new Symbol(Token.COMMA , yytext());
            }
            // fall through
          case 85: break;
          case 12:
            { return new Symbol(Token.MINUS , yytext());
            }
            // fall through
          case 86: break;
          case 13:
            { return new Symbol(Token.DOT , yytext());
            }
            // fall through
          case 87: break;
          case 14:
            { return new Symbol(Token.DIV , yytext());
            }
            // fall through
          case 88: break;
          case 15:
            { return new Symbol(Token.INTLITERAL, yytext());
            }
            // fall through
          case 89: break;
          case 16:
            { return new Symbol(Token.SEMICOLON , yytext());
            }
            // fall through
          case 90: break;
          case 17:
            { return new Symbol(Token.LESS , yytext());
            }
            // fall through
          case 91: break;
          case 18:
            { return new Symbol(Token.ASSIGN , yytext());
            }
            // fall through
          case 92: break;
          case 19:
            { return new Symbol(Token.GR , yytext());
            }
            // fall through
          case 93: break;
          case 20:
            { return new Symbol(Token.ID, yytext());
            }
            // fall through
          case 94: break;
          case 21:
            { return new Symbol(Token.LBRACK , yytext());
            }
            // fall through
          case 95: break;
          case 22:
            { return new Symbol(Token.RBRACK , yytext());
            }
            // fall through
          case 96: break;
          case 23:
            { return new Symbol(Token.LCURLY , yytext());
            }
            // fall through
          case 97: break;
          case 24:
            { return new Symbol(Token.RCURLY , yytext());
            }
            // fall through
          case 98: break;
          case 25:
            { return new Symbol(Token.ERROR , "STRING NOT FINISHED");
            }
            // fall through
          case 99: break;
          case 26:
            { string.append("\"");
	    yybegin(YYINITIAL);
	    return new Symbol(Token.STRINGLITERAL, string);
            }
            // fall through
          case 100: break;
          case 27:
            { string.append('\\');
            }
            // fall through
          case 101: break;
          case 28:
            { return new Symbol(Token.NOTEQ , yytext());
            }
            // fall through
          case 102: break;
          case 29:
            { return new Symbol(Token.AND , yytext());
            }
            // fall through
          case 103: break;
          case 30:
            { return new Symbol(Token.DOUBLELITERAL , yytext());
            }
            // fall through
          case 104: break;
          case 31:
            { return new Symbol(Token.LESSEQ , yytext());
            }
            // fall through
          case 105: break;
          case 32:
            { return new Symbol(Token.EQ , yytext());
            }
            // fall through
          case 106: break;
          case 33:
            { return new Symbol(Token.GREQ , yytext());
            }
            // fall through
          case 107: break;
          case 34:
            { return new Symbol(Token.IF , yytext());
            }
            // fall through
          case 108: break;
          case 35:
            { return new Symbol(Token.OR , yytext());
            }
            // fall through
          case 109: break;
          case 36:
            { string.append('\"');
            }
            // fall through
          case 110: break;
          case 37:
            { string.append('\'');
            }
            // fall through
          case 111: break;
          case 38:
            { string.append('\0');
            }
            // fall through
          case 112: break;
          case 39:
            { string.append('\b');
            }
            // fall through
          case 113: break;
          case 40:
            { string.append('\f');
            }
            // fall through
          case 114: break;
          case 41:
            { string.append('\t');
            }
            // fall through
          case 115: break;
          case 42:
            { return new Symbol(Token.FOR , yytext());
            }
            // fall through
          case 116: break;
          case 43:
            { return new Symbol(Token.INT , yytext());
            }
            // fall through
          case 117: break;
          case 44:
            { return new Symbol(Token.NEW , yytext());
            }
            // fall through
          case 118: break;
          case 45:
            { return new Symbol(Token.SCIDOUBLELITERAL , addPlus(yytext()));
            }
            // fall through
          case 119: break;
          case 46:
            { return new Symbol(Token.BOOL , yytext());
            }
            // fall through
          case 120: break;
          case 47:
            { return new Symbol(Token.BTOI , yytext());
            }
            // fall through
          case 121: break;
          case 48:
            { return new Symbol(Token.DTOI , yytext());
            }
            // fall through
          case 122: break;
          case 49:
            { return new Symbol(Token.ELSE , yytext());
            }
            // fall through
          case 123: break;
          case 50:
            { return new Symbol(Token.ITOB , yytext());
            }
            // fall through
          case 124: break;
          case 51:
            { return new Symbol(Token.ITOD , yytext());
            }
            // fall through
          case 125: break;
          case 52:
            { return new Symbol(Token.NULL , yytext());
            }
            // fall through
          case 126: break;
          case 53:
            { return new Symbol(Token.THIS , yytext());
            }
            // fall through
          case 127: break;
          case 54:
            { return new Symbol(Token.TRUE , yytext());
            }
            // fall through
          case 128: break;
          case 55:
            { return new Symbol(Token.VOID , yytext());
            }
            // fall through
          case 129: break;
          case 56:
            { return new Symbol(Token.SCIDOUBLELITERAL , yytext());
            }
            // fall through
          case 130: break;
          case 57:
            { return new Symbol(Token.PRINT , yytext());
            }
            // fall through
          case 131: break;
          case 58:
            { return new Symbol(Token.BREAK , yytext());
            }
            // fall through
          case 132: break;
          case 59:
            { return new Symbol(Token.CLASS , yytext());
            }
            // fall through
          case 133: break;
          case 60:
            { return new Symbol(Token.FALSE , yytext());
            }
            // fall through
          case 134: break;
          case 61:
            { return new Symbol(Token.WHILE , yytext());
            }
            // fall through
          case 135: break;
          case 62:
            { return new Symbol(Token.DOUBLE , yytext());
            }
            // fall through
          case 136: break;
          case 63:
            { return new Symbol(Token.PUBLIC , yytext());
            }
            // fall through
          case 137: break;
          case 64:
            { return new Symbol(Token.RETURN , yytext());
            }
            // fall through
          case 138: break;
          case 65:
            { return new Symbol(Token.STRING , yytext());
            }
            // fall through
          case 139: break;
          case 66:
            { return new Symbol(Token.EXTENDS , yytext());
            }
            // fall through
          case 140: break;
          case 67:
            { return new Symbol(Token.PRIVATE , yytext());
            }
            // fall through
          case 141: break;
          case 68:
            { return new Symbol(Token.NEWARRAY , yytext());
            }
            // fall through
          case 142: break;
          case 69:
            { return new Symbol(Token.READLINE , yytext());
            }
            // fall through
          case 143: break;
          case 70:
            { return new Symbol(Token.CONTINUE , yytext());
            }
            // fall through
          case 144: break;
          case 71:
            { return new Symbol(Token.INTERFACE , yytext());
            }
            // fall through
          case 145: break;
          case 72:
            { return new Symbol(Token.PROTECTED , yytext());
            }
            // fall through
          case 146: break;
          case 73:
            { return new Symbol(Token.IMPLEMENTS , yytext());
            }
            // fall through
          case 147: break;
          case 74:
            { return new Symbol(Token.READINTEGER , yytext());
            }
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
